--- dart/build/config/compiler/BUILD.gn	2020-08-26 10:48:35.000000000 -0000
+++ dart/build/config/compiler/BUILD.gn	2020-09-25 09:41:18.106528070 -0000
@@ -347,21 +347,6 @@
     }
   }
 
-  # We want to force a recompile and relink of the world whenever our toolchain
-  # changes since artifacts from an older version of the toolchain may or may
-  # not be compatible with newer ones. To achieve this, we insert a synthetic
-  # define into the compile line.
-  if (is_clang && (is_linux || is_mac)) {
-    if (is_linux) {
-      toolchain_stamp_file =
-          "//buildtools/linux-x64/clang/.versions/clang.cipd_version"
-    } else {
-      toolchain_stamp_file =
-          "//buildtools/mac-x64/clang/.versions/clang.cipd_version"
-    }
-    cipd_version = read_file(toolchain_stamp_file, "json")
-    defines = [ "TOOLCHAIN_VERSION=${cipd_version.instance_id}" ]
-  }
 
   # Assign any flags set for the C compiler to asmflags so that they are sent
   # to the assembler. The Windows assembler takes different types of flags
--- dart/build/toolchain/linux/BUILD.gn	2020-08-26 10:48:35.000000000 -0000
+++ dart/build/toolchain/linux/BUILD.gn	2020-09-25 09:52:42.406360105 -0000
@@ -9,6 +9,7 @@
 
 declare_args() {
   toolchain_prefix = ""
+  llvm_prefix = ""
   # TODO(zra): Add an argument for overriding the host toolchain.
 }
 
@@ -95,7 +96,7 @@
 
 gcc_toolchain("clang_x86") {
   prefix = rebase_path("//buildtools/linux-x64/clang/bin", root_build_dir)
-  cc = "${compiler_prefix}${prefix}/clang"
+  cc = "${toolchain_prefix}${prefix}/clang"
   cxx = "${compiler_prefix}${prefix}/clang++"
 
   readelf = "${prefix}/llvm-readelf"
@@ -126,7 +127,7 @@
 }
 
 gcc_toolchain("clang_x64") {
-  prefix = rebase_path("//buildtools/linux-x64/clang/bin", root_build_dir)
+  prefix = rebase_path("${llvm_prefix}/bin", root_build_dir)
   cc = "${compiler_prefix}${prefix}/clang"
   cxx = "${compiler_prefix}${prefix}/clang++"
